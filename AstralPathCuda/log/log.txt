[INFO 2023-05-02 10:13:20 ]核函数数:1
[INFO 2023-05-02 10:13:20 ]设备函数数:1
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms      final int N = 1000;//global->     const int N = 1000;//global
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 17 ms int[] __device__d;//length:2->int d[2] =  {};//length:2
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms int[] __device__d_x;//length:N->int d_x[N] =  {};//length:N
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms reduce()(GLOBAL)->reduce()
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdxx;->        const int tid = threadIdx.x;
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         final int bid = blockIdxx;->        const int bid = blockIdx.x;
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms         final int n = tid;->        const int n = tid;
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 3 ms         int[] __shared__s_y = {};//extern->extern __shared__ int __shared__s_y[];
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms         if (n < N) {->        if (n < N) {
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 12 ms             __shared__s_y[tid] = ICuda.__ldg(__device__d_x[n]);->            __shared__s_y[tid] = __ldg(&d_x[n]);
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms         }->        }
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads();->        __syncthreads();
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms ->
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1)->        for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         {->        {
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms             if (tid < offset)->            if (tid < offset)
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms             {->            {
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset];->                __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms             }->            }
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads();->            __syncthreads();
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         }->        }
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms ->
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         int y = __shared__s_y[tid];->        int y = __shared__s_y[tid];
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1)->        for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         {->        {
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 2 ms             y += ICuda.__shfl_down_sync("0xffffffff", y, offset);->            y += __shfl_down_sync(0xffffffff, y, offset);
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms         }->        }
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms ->
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         if (tid == 0)->        if (tid == 0)
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms         {->        {
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__d[0], y);->            atomicAdd(&d[0], y);
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         }->        }
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms     }->    }
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms         int[] ha = new int[N];->        int ha[N] = {};
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         for(int x = 0; x < N ; ++x) {->        for(int x = 0; x < N ; ++x) {
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms             ha[x] = 1;->            ha[x] = 1;
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         }->        }
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms         ha[0] = ICuda.atoi(argv[1]);->        ha[0] = atoi(argv[1]);
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms ->
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("d_x","ha",ICuda.sizeof("int")*N);->        cudaMemcpyToSymbol(d_x,ha,sizeof(int)*N);
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms ->
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms         final int block_size = 128;->        const int block_size = 128;
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size;->        const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms ->
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 1 ms         __global__reduce();//tags:<<<block_size,grid_size,128>>>->        reduce<<<block_size,grid_size,128>>>();//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms ->
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms ->
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         int device_id = 0;->        int device_id = 0;
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("ha","d",ICuda.sizeof("int")*2);->        cudaMemcpyFromSymbol(ha,d,sizeof(int)*2);
[INFO 2023-05-02 10:13:20 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%d\n",ha[0]);->        printf("c=%d\n",ha[0]);
[INFO 2023-05-02 10:16:21 ]-----------------------------
[INFO 2023-05-02 10:16:21 ]核函数数:1
[INFO 2023-05-02 10:16:21 ]设备函数数:1
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global->     const int N = 1000;//global
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 18 ms int[] __device__d_x;//length:N->int d_x[N] =  {};//length:N
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms int[] __device__d;//length:2->int d[2] =  {};//length:2
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms reduce()(GLOBAL)->reduce()
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdxx;->        const int tid = threadIdx.x;
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 4 ms         final int bid = blockIdxx;->        const int bid = blockIdx.x;
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms         final int n = tid;->        const int n = tid;
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms         int[] __shared__s_y = {};//extern->extern __shared__ int __shared__s_y[];
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms         if (n < N) {->        if (n < N) {
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 9 ms             __shared__s_y[tid] = ICuda.__ldg(__device__d_x[n]);->            __shared__s_y[tid] = __ldg(&d_x[n]);
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms         }->        }
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads();->        __syncthreads();
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms ->
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1)->        for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms         {->        {
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms             if (tid < offset)->            if (tid < offset)
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms             {->            {
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset];->                __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms             }->            }
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads();->            __syncthreads();
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms         }->        }
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms ->
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms         int y = __shared__s_y[tid];->        int y = __shared__s_y[tid];
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1)->        for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms         {->        {
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 2 ms             y += ICuda.__shfl_down_sync("0xffffffff", y, offset);->            y += __shfl_down_sync(0xffffffff, y, offset);
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms         }->        }
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms ->
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms         if (tid == 0)->        if (tid == 0)
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms         {->        {
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__d[0], y);->            atomicAdd(&d[0], y);
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms         }->        }
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms     }->    }
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms         int[] ha = new int[N];->        int ha[N] = {};
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms         for(int x = 0; x < N ; ++x) {->        for(int x = 0; x < N ; ++x) {
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms             ha[x] = 1;->            ha[x] = 1;
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms         }->        }
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms         ha[0] = ICuda.atoi(argv[1]);->        ha[0] = atoi(argv[1]);
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms ->
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyToSymbol("d_x","ha",ICuda.sizeof("int")*N);->        cudaMemcpyToSymbol(d_x,ha,sizeof(int)*N);
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms ->
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms         final int block_size = 128;->        const int block_size = 128;
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size;->        const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms ->
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms         __global__reduce();//tags:<<<block_size,grid_size,128>>>->        reduce<<<block_size,grid_size,128>>>();//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms ->
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 1 ms ->
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms         int device_id = 0;->        int device_id = 0;
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("ha","d",ICuda.sizeof("int")*2);->        cudaMemcpyFromSymbol(ha,d,sizeof(int)*2);
[INFO 2023-05-02 10:16:21 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%d\n",ha[0]);->        printf("c=%d\n",ha[0]);
[INFO 2023-05-02 10:17:16 ]-----------------------------
[INFO 2023-05-02 10:17:16 ]核函数数:1
[INFO 2023-05-02 10:17:16 ]设备函数数:1
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 21 ms int[] __device__d_x;//length:N -> int d_x[N] =  {};//length:N
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 2 ms int[] __device__d;//length:2 -> int d[2] =  {};//length:2
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms reduce()(GLOBAL) -> reduce()
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms         final int bid = blockIdxx; ->         const int bid = blockIdx.x;
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms         int[] __shared__s_y = {};//extern -> extern __shared__ int __shared__s_y[];
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms         if (n < N) { ->         if (n < N) {
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 9 ms             __shared__s_y[tid] = ICuda.__ldg(__device__d_x[n]); ->             __shared__s_y[tid] = __ldg(&d_x[n]);
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 2 ms  -> 
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms         int y = __shared__s_y[tid]; ->         int y = __shared__s_y[tid];
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms             y += ICuda.__shfl_down_sync("0xffffffff", y, offset); ->             y += __shfl_down_sync(0xffffffff, y, offset);
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__d[0], y); ->             atomicAdd(&d[0], y);
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms         int[] ha = new int[N]; ->         int ha[N] = {};
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms         for(int x = 0; x < N ; ++x) { ->         for(int x = 0; x < N ; ++x) {
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms             ha[x] = 1; ->             ha[x] = 1;
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms         ha[0] = ICuda.atoi(argv[1]); ->         ha[0] = atoi(argv[1]);
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("d_x","ha",ICuda.sizeof("int")*N); ->         cudaMemcpyToSymbol(d_x,ha,sizeof(int)*N);
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 1 ms         __global__reduce();//tags:<<<block_size,grid_size,128>>> ->         reduce<<<block_size,grid_size,128>>>();//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms         int device_id = 0; ->         int device_id = 0;
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("ha","d",ICuda.sizeof("int")*2); ->         cudaMemcpyFromSymbol(ha,d,sizeof(int)*2);
[INFO 2023-05-02 10:17:16 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%d\n",ha[0]); ->         printf("c=%d\n",ha[0]);
[INFO 2023-05-13 08:24:16 ]-------------------------新纪录--------------------------
[INFO 2023-05-13 08:24:16 ]核函数数:1
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 1 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 2 ms test(int[] $h,int[] $b)(GLOBAL) -> test(int *h,int *b)
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 1 ms         System.out.printf("(%d,%d)\n",threadIdxx,threadIdxy); ->         printf("(%d,%d)\n",threadIdx.x,threadIdx.y);
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         $b[threadIdxx] = $h[threadIdxx]; ->         b[threadIdx.x] = h[threadIdx.x];
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 1 ms         cudaStream_t stream_1 = new cudaStream_t(); ->         cudaStream_t stream_1 ;
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         cudaStream_t stream_2 = new cudaStream_t(); ->         cudaStream_t stream_2 ;
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 6 ms         ICuda.cudaStreamCreate(stream_1); ->         cudaStreamCreate(&stream_1);
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamCreate(stream_2); ->         cudaStreamCreate(&stream_2);
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         int M = ICuda.sizeof("int")*N; ->         int M = sizeof(int)*N;
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         int[] $h_x = ICuda.malloc(M); ->         int *h_x = malloc(M);
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         int[] $h = {}; ->         int *h;
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         for (int x = 0;x < N;x ++) { ->         for (int x = 0;x < N;x ++) {
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms             $h_x[x] = 1; ->             h_x[x] = 1;
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         int[] $d_x1 = {}; ->         int *d_x1;
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 1 ms         int[] $d_y1 = {}; ->         int *d_y1;
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMalloc("d_x1",M); ->         cudaMalloc((void **)&d_x1,M);
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpy("d_x1","h_x",M,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x1,h_x,M,cudaMemcpyHostToDevice);
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMalloc("d_y1",M); ->         cudaMalloc((void **)&d_y1,M);
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         __global__test($d_x1,$d_y1);//<<<grid_size,block_size,0,stream_1>>> ->         test<<<grid_size,block_size>>>(d_x1,d_y1);//<<<grid_size,block_size,0,stream_1>>>
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 1 ms         __global__test($d_x1,$d_y1);//<<<grid_size,block_size,0,stream_2>>> ->         test<<<grid_size,block_size>>>(d_x1,d_y1);//<<<grid_size,block_size,0,stream_2>>>
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamSynchronize(stream_1); ->         cudaStreamSynchronize(stream_1);
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 1 ms         ICuda.cudaStreamSynchronize(stream_2); ->         cudaStreamSynchronize(stream_2);
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 1 ms         ICuda.cudaStreamDestroy(stream_1); ->         cudaStreamDestroy(stream_1);
[INFO 2023-05-13 08:24:16 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamDestroy(stream_2); ->         cudaStreamDestroy(stream_2);
[ERROR 2023-05-13 08:24:16 ]202305132024.cu

[INFO 2023-05-13 08:25:30 ]-------------------------新纪录--------------------------
[INFO 2023-05-13 08:25:30 ]核函数数:1
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 2 ms test(int[] $h,int[] $b)(GLOBAL) -> test(int *h,int *b)
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms         System.out.printf("(%d,%d)\n",threadIdxx,threadIdxy); ->         printf("(%d,%d)\n",threadIdx.x,threadIdx.y);
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms         $b[threadIdxx] = $h[threadIdxx]; ->         b[threadIdx.x] = h[threadIdx.x];
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms         cudaStream_t stream_1 = new cudaStream_t(); ->         cudaStream_t stream_1 ;
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms         cudaStream_t stream_2 = new cudaStream_t(); ->         cudaStream_t stream_2 ;
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 9 ms         ICuda.cudaStreamCreate(stream_1); ->         cudaStreamCreate(&stream_1);
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamCreate(stream_2); ->         cudaStreamCreate(&stream_2);
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms         int M = ICuda.sizeof("int")*N; ->         int M = sizeof(int)*N;
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms         int[] $h_x = ICuda.malloc(M); ->         int *h_x = malloc(M);
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms         int[] $h = {}; ->         int *h;
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms         for (int x = 0;x < N;x ++) { ->         for (int x = 0;x < N;x ++) {
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms             $h_x[x] = 1; ->             h_x[x] = 1;
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms         int[] $d_x1 = {}; ->         int *d_x1;
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms         int[] $d_y1 = {}; ->         int *d_y1;
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("d_x1",M); ->         cudaMalloc((void **)&d_x1,M);
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpy("d_x1","h_x",M,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x1,h_x,M,cudaMemcpyHostToDevice);
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("d_y1",M); ->         cudaMalloc((void **)&d_y1,M);
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms         __global__test($d_x1,$d_y1);//<<<grid_size,block_size,0,stream_1>>> ->         test<<<grid_size,block_size>>>(d_x1,d_y1);//<<<grid_size,block_size,0,stream_1>>>
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms         __global__test($d_x1,$d_y1);//<<<grid_size,block_size,0,stream_2>>> ->         test<<<grid_size,block_size>>>(d_x1,d_y1);//<<<grid_size,block_size,0,stream_2>>>
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamSynchronize(stream_1); ->         cudaStreamSynchronize(stream_1);
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 1 ms         ICuda.cudaStreamSynchronize(stream_2); ->         cudaStreamSynchronize(stream_2);
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamDestroy(stream_1); ->         cudaStreamDestroy(stream_1);
[INFO 2023-05-13 08:25:30 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamDestroy(stream_2); ->         cudaStreamDestroy(stream_2);
[ERROR 2023-05-13 08:25:30 ]D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202305132025.cu(18): error: a value of type "void *" cannot be used to initialize an entity of type "int *"

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202305132025.cu(19): warning #177-D: variable "h" was declared but never referenced

1 error detected in the compilation of "D:/idea_astralpathtalk/AstralPathCuda/AstralPathCuda//temp/202305132025.cu".
202305132025.cu

[INFO 2023-05-13 08:28:14 ]-------------------------新纪录--------------------------
[INFO 2023-05-13 08:28:14 ]核函数数:1
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 3 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 2 ms test(int[] $h,int[] $b)(GLOBAL) -> test(int *h,int *b)
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 2 ms         System.out.printf("(%d,%d)\n",threadIdxx,threadIdxy); ->         printf("(%d,%d)\n",threadIdx.x,threadIdx.y);
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms         $b[threadIdxx] = $h[threadIdxx]; ->         b[threadIdx.x] = h[threadIdx.x];
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms         cudaStream_t stream_1 = new cudaStream_t(); ->         cudaStream_t stream_1 ;
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms         cudaStream_t stream_2 = new cudaStream_t(); ->         cudaStream_t stream_2 ;
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 9 ms         ICuda.cudaStreamCreate(stream_1); ->         cudaStreamCreate(&stream_1);
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms         ICuda.cudaStreamCreate(stream_2); ->         cudaStreamCreate(&stream_2);
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms         int M = ICuda.sizeof("int")*N; ->         int M = sizeof(int)*N;
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms         int[] $h_x = ICuda.malloc(M); ->         int *h_x = malloc(M);
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms         for (int x = 0;x < N;x ++) { ->         for (int x = 0;x < N;x ++) {
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms             $h_x[x] = 1; ->             h_x[x] = 1;
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 0 ms         int[] $d_x1 = {}; ->         int *d_x1;
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 2 ms         int[] $d_y1 = {}; ->         int *d_y1;
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("d_x1",M); ->         cudaMalloc((void **)&d_x1,M);
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("d_x1","h_x",M,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x1,h_x,M,cudaMemcpyHostToDevice);
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMalloc("d_y1",M); ->         cudaMalloc((void **)&d_y1,M);
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 2 ms         __global__test($d_x1,$d_y1);//tags:<<<grid_size,block_size,0,stream_1>>> ->         test<<<grid_size,block_size,0,stream_1>>>(d_x1,d_y1);//tags:<<<grid_size,block_size,0,stream_1>>>
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms         __global__test($d_x1,$d_y1);//tags:<<<grid_size,block_size,0,stream_2>>> ->         test<<<grid_size,block_size,0,stream_2>>>(d_x1,d_y1);//tags:<<<grid_size,block_size,0,stream_2>>>
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms         ICuda.cudaStreamSynchronize(stream_1); ->         cudaStreamSynchronize(stream_1);
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamSynchronize(stream_2); ->         cudaStreamSynchronize(stream_2);
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 1 ms         ICuda.cudaStreamDestroy(stream_1); ->         cudaStreamDestroy(stream_1);
[INFO 2023-05-13 08:28:14 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamDestroy(stream_2); ->         cudaStreamDestroy(stream_2);
[ERROR 2023-05-13 08:28:14 ]D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202305132028.cu(18): error: a value of type "void *" cannot be used to initialize an entity of type "int *"

1 error detected in the compilation of "D:/idea_astralpathtalk/AstralPathCuda/AstralPathCuda//temp/202305132028.cu".
202305132028.cu

[INFO 2023-05-13 08:29:06 ]-------------------------新纪录--------------------------
[INFO 2023-05-13 08:29:06 ]核函数数:1
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 1 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 2 ms test(int[] $h,int[] $b)(GLOBAL) -> test(int *h,int *b)
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         System.out.printf("(%d,%d)\n",threadIdxx,threadIdxy); ->         printf("(%d,%d)\n",threadIdx.x,threadIdx.y);
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 1 ms         $b[threadIdxx] = $h[threadIdxx]; ->         b[threadIdx.x] = h[threadIdx.x];
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 1 ms     } ->     }
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         cudaStream_t stream_1 = new cudaStream_t(); ->         cudaStream_t stream_1 ;
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 1 ms         cudaStream_t stream_2 = new cudaStream_t(); ->         cudaStream_t stream_2 ;
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 7 ms         ICuda.cudaStreamCreate(stream_1); ->         cudaStreamCreate(&stream_1);
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamCreate(stream_2); ->         cudaStreamCreate(&stream_2);
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 1 ms         int M = ICuda.sizeof("int")*N; ->         int M = sizeof(int)*N;
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 1 ms         int[] $h_x = (int[]) ICuda.malloc(M); ->         int *h_x = (int*) malloc(M);
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         for (int x = 0;x < N;x ++) { ->         for (int x = 0;x < N;x ++) {
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 1 ms             $h_x[x] = 1; ->             h_x[x] = 1;
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 1 ms         int[] $d_x1 = {}; ->         int *d_x1;
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         int[] $d_y1 = {}; ->         int *d_y1;
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMalloc("d_x1",M); ->         cudaMalloc((void **)&d_x1,M);
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpy("d_x1","h_x",M,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x1,h_x,M,cudaMemcpyHostToDevice);
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMalloc("d_y1",M); ->         cudaMalloc((void **)&d_y1,M);
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         __global__test($d_x1,$d_y1);//tags:<<<grid_size,block_size,0,stream_1>>> ->         test<<<grid_size,block_size,0,stream_1>>>(d_x1,d_y1);//tags:<<<grid_size,block_size,0,stream_1>>>
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         __global__test($d_x1,$d_y1);//tags:<<<grid_size,block_size,0,stream_2>>> ->         test<<<grid_size,block_size,0,stream_2>>>(d_x1,d_y1);//tags:<<<grid_size,block_size,0,stream_2>>>
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 1 ms         ICuda.cudaStreamSynchronize(stream_1); ->         cudaStreamSynchronize(stream_1);
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamSynchronize(stream_2); ->         cudaStreamSynchronize(stream_2);
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamDestroy(stream_1); ->         cudaStreamDestroy(stream_1);
[INFO 2023-05-13 08:29:06 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamDestroy(stream_2); ->         cudaStreamDestroy(stream_2);
[INFO 2023-05-13 08:30:20 ]-------------------------新纪录--------------------------
[INFO 2023-05-13 08:30:20 ]核函数数:1
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 2 ms test(int[] $h,int[] $b,int x)(GLOBAL) -> test(int *h,int *b,int x)
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 2 ms         System.out.printf("流 %d - (%d,%d)\n",x,threadIdxx,threadIdxy); ->         printf("流 %d - (%d,%d)\n",x,threadIdx.x,threadIdx.y);
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 2 ms         $b[threadIdxx] = $h[threadIdxx]; ->         b[threadIdx.x] = h[threadIdx.x];
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 1 ms     } ->     }
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 2 ms         cudaStream_t stream_1 = new cudaStream_t(); ->         cudaStream_t stream_1 ;
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 0 ms         cudaStream_t stream_2 = new cudaStream_t(); ->         cudaStream_t stream_2 ;
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 10 ms         ICuda.cudaStreamCreate(stream_1); ->         cudaStreamCreate(&stream_1);
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 1 ms         ICuda.cudaStreamCreate(stream_2); ->         cudaStreamCreate(&stream_2);
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 0 ms         int M = ICuda.sizeof("int")*N; ->         int M = sizeof(int)*N;
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 1 ms         int[] $h_x = (int[]) ICuda.malloc(M); ->         int *h_x = (int*) malloc(M);
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 0 ms         for (int x = 0;x < N;x ++) { ->         for (int x = 0;x < N;x ++) {
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 0 ms             $h_x[x] = 1; ->             h_x[x] = 1;
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 2 ms         int[] $d_x1 = {}; ->         int *d_x1;
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 1 ms         int[] $d_y1 = {}; ->         int *d_y1;
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("d_x1",M); ->         cudaMalloc((void **)&d_x1,M);
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 2 ms         ICuda.cudaMemcpy("d_x1","h_x",M,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x1,h_x,M,cudaMemcpyHostToDevice);
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("d_y1",M); ->         cudaMalloc((void **)&d_y1,M);
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 1 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 1 ms         __global__test($d_x1,$d_y1,0);//tags:<<<grid_size,block_size,0,stream_1>>> ->         test<<<grid_size,block_size,0,stream_1>>>(d_x1,d_y1,0);//tags:<<<grid_size,block_size,0,stream_1>>>
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 1 ms         __global__test($d_x1,$d_y1,1);//tags:<<<grid_size,block_size,0,stream_2>>> ->         test<<<grid_size,block_size,0,stream_2>>>(d_x1,d_y1,1);//tags:<<<grid_size,block_size,0,stream_2>>>
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamSynchronize(stream_1); ->         cudaStreamSynchronize(stream_1);
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamSynchronize(stream_2); ->         cudaStreamSynchronize(stream_2);
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamDestroy(stream_1); ->         cudaStreamDestroy(stream_1);
[INFO 2023-05-13 08:30:20 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamDestroy(stream_2); ->         cudaStreamDestroy(stream_2);
[INFO 2023-05-13 08:31:10 ]-------------------------新纪录--------------------------
[INFO 2023-05-13 08:31:10 ]核函数数:1
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 4 ms test(int[] $h,int[] $b,int x)(GLOBAL) -> test(int *h,int *b,int x)
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms         System.out.printf("Stream: %d - (%d,%d)\n",x,threadIdxx,threadIdxy); ->         printf("Stream: %d - (%d,%d)\n",x,threadIdx.x,threadIdx.y);
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms         $b[threadIdxx] = $h[threadIdxx]; ->         b[threadIdx.x] = h[threadIdx.x];
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms         cudaStream_t stream_1 = new cudaStream_t(); ->         cudaStream_t stream_1 ;
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms         cudaStream_t stream_2 = new cudaStream_t(); ->         cudaStream_t stream_2 ;
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 8 ms         ICuda.cudaStreamCreate(stream_1); ->         cudaStreamCreate(&stream_1);
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms         ICuda.cudaStreamCreate(stream_2); ->         cudaStreamCreate(&stream_2);
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 0 ms         int M = ICuda.sizeof("int")*N; ->         int M = sizeof(int)*N;
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms         int[] $h_x = (int[]) ICuda.malloc(M); ->         int *h_x = (int*) malloc(M);
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 0 ms         for (int x = 0;x < N;x ++) { ->         for (int x = 0;x < N;x ++) {
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 0 ms             $h_x[x] = 1; ->             h_x[x] = 1;
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 0 ms         int[] $d_x1 = {}; ->         int *d_x1;
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms         int[] $d_y1 = {}; ->         int *d_y1;
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMalloc("d_x1",M); ->         cudaMalloc((void **)&d_x1,M);
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("d_x1","h_x",M,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x1,h_x,M,cudaMemcpyHostToDevice);
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMalloc("d_y1",M); ->         cudaMalloc((void **)&d_y1,M);
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms         __global__test($d_x1,$d_y1,0);//tags:<<<grid_size,block_size,0,stream_1>>> ->         test<<<grid_size,block_size,0,stream_1>>>(d_x1,d_y1,0);//tags:<<<grid_size,block_size,0,stream_1>>>
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms         __global__test($d_x1,$d_y1,1);//tags:<<<grid_size,block_size,0,stream_2>>> ->         test<<<grid_size,block_size,0,stream_2>>>(d_x1,d_y1,1);//tags:<<<grid_size,block_size,0,stream_2>>>
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamSynchronize(stream_1); ->         cudaStreamSynchronize(stream_1);
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms         ICuda.cudaStreamSynchronize(stream_2); ->         cudaStreamSynchronize(stream_2);
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 1 ms         ICuda.cudaStreamDestroy(stream_1); ->         cudaStreamDestroy(stream_1);
[INFO 2023-05-13 08:31:10 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamDestroy(stream_2); ->         cudaStreamDestroy(stream_2);
[INFO 2023-05-13 08:33:52 ]-------------------------新纪录--------------------------
[INFO 2023-05-13 08:33:52 ]核函数数:1
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 3 ms test(float[] $h,float[] $b,int x)(GLOBAL) -> test(float *h,float *b,int x)
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms         System.out.printf("Stream: %d - (%f,%f)\n",x,threadIdxx,threadIdxy); ->         printf("Stream: %d - (%f,%f)\n",x,threadIdx.x,threadIdx.y);
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 1 ms         $b[threadIdxx] = ICuda.sqrt($h[threadIdxx]); ->         b[threadIdx.x] = sqrt(h[threadIdx.x]);
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 1 ms     } ->     }
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms         cudaStream_t stream_1 = new cudaStream_t(); ->         cudaStream_t stream_1 ;
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 1 ms         cudaStream_t stream_2 = new cudaStream_t(); ->         cudaStream_t stream_2 ;
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 7 ms         ICuda.cudaStreamCreate(stream_1); ->         cudaStreamCreate(&stream_1);
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 2 ms         ICuda.cudaStreamCreate(stream_2); ->         cudaStreamCreate(&stream_2);
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 1 ms         int M = ICuda.sizeof("float")*N; ->         int M = sizeof(float)*N;
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms         float[] $h_x = (float[]) ICuda.malloc(M); ->         float *h_x = (float*) malloc(M);
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 1 ms         for (int x = 0;x < N;x ++) { ->         for (int x = 0;x < N;x ++) {
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms             $h_x[x] = (float) ((x + 1) * 999.0123); ->             h_x[x] = (float) ((x + 1) * 999.0123);
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 1 ms         float[] $d_x1 = {}; ->         float *d_x1;
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 1 ms         float[] $d_y1 = {}; ->         float *d_y1;
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("d_x1",M); ->         cudaMalloc((void **)&d_x1,M);
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpy("d_x1","h_x",M,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x1,h_x,M,cudaMemcpyHostToDevice);
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMalloc("d_y1",M); ->         cudaMalloc((void **)&d_y1,M);
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 1 ms         __global__test($d_x1,$d_y1,0);//tags:<<<grid_size,block_size,0,stream_1>>> ->         test<<<grid_size,block_size,0,stream_1>>>(d_x1,d_y1,0);//tags:<<<grid_size,block_size,0,stream_1>>>
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 1 ms         __global__test($d_x1,$d_y1,1);//tags:<<<grid_size,block_size,0,stream_2>>> ->         test<<<grid_size,block_size,0,stream_2>>>(d_x1,d_y1,1);//tags:<<<grid_size,block_size,0,stream_2>>>
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamSynchronize(stream_1); ->         cudaStreamSynchronize(stream_1);
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 1 ms         ICuda.cudaStreamSynchronize(stream_2); ->         cudaStreamSynchronize(stream_2);
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 1 ms         ICuda.cudaStreamDestroy(stream_1); ->         cudaStreamDestroy(stream_1);
[INFO 2023-05-13 08:33:52 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamDestroy(stream_2); ->         cudaStreamDestroy(stream_2);
[INFO 2023-05-13 08:39:01 ]-------------------------新纪录--------------------------
[INFO 2023-05-13 08:39:01 ]核函数数:1
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 1 ms test(int[] $h,int[] $b,int x)(GLOBAL) -> test(int *h,int *b,int x)
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         System.out.printf("Stream: %d - (%d,%d)\n",x,threadIdxx,threadIdxy); ->         printf("Stream: %d - (%d,%d)\n",x,threadIdx.x,threadIdx.y);
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         $b[threadIdxx] = $h[threadIdxx]; ->         b[threadIdx.x] = h[threadIdx.x];
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         cudaStream_t stream_1 = new cudaStream_t(); ->         cudaStream_t stream_1 ;
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         cudaStream_t stream_2 = new cudaStream_t(); ->         cudaStream_t stream_2 ;
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 6 ms         ICuda.cudaStreamCreate(stream_1); ->         cudaStreamCreate(&stream_1);
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 1 ms         ICuda.cudaStreamCreate(stream_2); ->         cudaStreamCreate(&stream_2);
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         int M = ICuda.sizeof("int")*N; ->         int M = sizeof(int)*N;
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 1 ms         int[] $h_x = (int[]) ICuda.malloc(M); ->         int *h_x = (int*) malloc(M);
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         for (int x = 0;x < N;x ++) { ->         for (int x = 0;x < N;x ++) {
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms             $h_x[x] = 1; ->             h_x[x] = 1;
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 1 ms         int[] $d_x1 = {}; ->         int *d_x1;
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         int[] $d_y1 = {}; ->         int *d_y1;
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMallocHost("d_x1",M); ->         cudaMallocHost((void **)&d_x1,M);
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyAsync("d_x1","h_x",M,cudaMemcpyHostToDevice,stream_1); ->         cudaMemcpyAsync(d_x1,h_x,M,cudaMemcpyHostToDevice,stream_1);
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyAsync("d_x1","h_x",M,cudaMemcpyHostToDevice,stream_2); ->         cudaMemcpyAsync(d_x1,h_x,M,cudaMemcpyHostToDevice,stream_2);
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMallocHost("d_y1",M); ->         cudaMallocHost((void **)&d_y1,M);
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         __global__test($d_x1,$d_y1,0);//tags:<<<grid_size,block_size,0,stream_1>>> ->         test<<<grid_size,block_size,0,stream_1>>>(d_x1,d_y1,0);//tags:<<<grid_size,block_size,0,stream_1>>>
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         __global__test($d_x1,$d_y1,1);//tags:<<<grid_size,block_size,0,stream_2>>> ->         test<<<grid_size,block_size,0,stream_2>>>(d_x1,d_y1,1);//tags:<<<grid_size,block_size,0,stream_2>>>
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamSynchronize(stream_1); ->         cudaStreamSynchronize(stream_1);
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 2 ms         ICuda.cudaStreamSynchronize(stream_2); ->         cudaStreamSynchronize(stream_2);
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamDestroy(stream_1); ->         cudaStreamDestroy(stream_1);
[INFO 2023-05-13 08:39:01 ](Java2Cuda)耗时: 0 ms         ICuda.cudaStreamDestroy(stream_2); ->         cudaStreamDestroy(stream_2);
[INFO 2023-05-20 10:06:01 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:06:01 ]核函数数:1
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 3 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 20 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 2 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 2 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 2 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 2 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         final int bid = blockIdxx; ->         const int bid = blockIdx.x;
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 2 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 11 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 2 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 2 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         if (n == 0) { ->         if (n == 0) {
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         double[] hx = new double[N]; ->         double[] hx = new double[N];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         double[] hy = new double[N]; ->         double[] hy = new double[N];
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         int device_id = 0; ->         int device_id = 0;
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyFromSymbol("hx","temp",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(hx,temp,sizeof(double)*2);
[INFO 2023-05-20 10:06:01 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%d\n",hx[0]); ->         printf("c=%d\n",hx[0]);
[ERROR 2023-05-20 10:06:01 ]D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202305202206.cu(14): warning #177-D: variable "bid" was declared but never referenced

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202305202206.cu(77): error: expected an identifier

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202305202206.cu(77): error: expected a ";"

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202305202206.cu(78): error: expected an identifier

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202305202206.cu(78): error: expected a ";"

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202305202206.cu(80): error: identifier "hx" is undefined

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202305202206.cu(81): error: identifier "hy" is undefined

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202305202206.cu(83): error: identifier "hx" is undefined

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202305202206.cu(84): error: identifier "hy" is undefined

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202305202206.cu(91): warning #177-D: variable "device_id" was declared but never referenced

8 errors detected in the compilation of "D:/idea_astralpathtalk/AstralPathCuda/AstralPathCuda//temp/202305202206.cu".
202305202206.cu

[INFO 2023-05-20 10:07:51 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:07:51 ]核函数数:1
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 2 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 14 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 3 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         final int bid = blockIdxx; ->         const int bid = blockIdx.x;
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 2 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 9 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 2 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         if (n == 0) { ->         if (n == 0) {
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 2 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 1 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         int device_id = 0; ->         int device_id = 0;
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("hx","temp",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(hx,temp,sizeof(double)*2);
[INFO 2023-05-20 10:07:51 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%d\n",hx[0]); ->         printf("c=%d\n",hx[0]);
[INFO 2023-05-20 10:08:37 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:08:37 ]核函数数:1
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 2 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 23 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 3 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 2 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 2 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 12 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 2 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 2 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 2 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 2 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 3 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 2 ms         } ->         }
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         if (n == 0) { ->         if (n == 0) {
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 2 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         int device_id = 0; ->         int device_id = 0;
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("hx","temp",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(hx,temp,sizeof(double)*2);
[INFO 2023-05-20 10:08:37 ](Java2Cuda)耗时: 1 ms         System.out.printf("c=%f\n",hx[0]); ->         printf("c=%f\n",hx[0]);
[INFO 2023-05-20 10:08:58 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:08:58 ]核函数数:1
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 2 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 19 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 2 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 2 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 2 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 2 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 2 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 2 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 11 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 3 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 2 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 9 ms         { ->         {
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         if (n == 0) { ->         if (n == 0) {
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms     } ->     }
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("hx","temp",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(hx,temp,sizeof(double)*2);
[INFO 2023-05-20 10:08:58 ](Java2Cuda)耗时: 1 ms         System.out.printf("c=%f\n",hx[0]); ->         printf("c=%f\n",hx[0]);
[INFO 2023-05-20 10:10:37 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:10:37 ]核函数数:1
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 19 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 3 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 2 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 2 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 5 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 2 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 10 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 3 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         if (n == 0) { ->         if (n == 0) {
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 2 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 2 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 1 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 2 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:10:37 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:11:25 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:11:25 ]核函数数:1
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 3 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 22 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 2 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 2 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 8 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 2 ms         } ->         }
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 2 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 2 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 2 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         if (n == 0) { ->         if (n == 0) {
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 2 ms  -> 
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 2 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 1 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:11:25 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:12:07 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:12:07 ]核函数数:1
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 15 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 6 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 2 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 2 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:12:07 ](Java2Cuda)耗时: 1 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:13:10 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:13:10 ]核函数数:1
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 2 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 17 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 2 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 2 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 7 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 2 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 2 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             System.out.printf("xy= %f",__device__temp[4]); ->             printf("xy= %f",temp[4]);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:13:10 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:13:52 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:13:52 ]核函数数:1
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 2 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 9 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 2 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 2 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 2 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 6 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 2 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         System.out.printf("xy= %f",dxy); ->         printf("xy= %f",dxy);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 1 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:13:52 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:15:42 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:15:42 ]核函数数:1
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 2 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 10 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 2 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 2 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 8 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 2 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms         System.out.printf("xy= %f",dxy); ->         printf("xy= %f",dxy);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 2 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 2 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms         System.out.printf("1",0); ->         printf("1",0);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         System.out.printf("1",0); ->         printf("1",0);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 1 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         System.out.printf("1",0); ->         printf("1",0);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:15:42 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:16:05 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:16:05 ]核函数数:1
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 2 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 14 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         System.out.printf("1",0); ->         printf("1",0);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 2 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 10 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 2 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 2 ms         System.out.printf("xy= %f",dxy); ->         printf("xy= %f",dxy);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 1 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         System.out.printf("1",0); ->         printf("1",0);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         System.out.printf("1",0); ->         printf("1",0);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         System.out.printf("1",0); ->         printf("1",0);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:16:05 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:16:53 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:16:53 ]核函数数:1
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 3 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 12 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 2 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 7 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 2 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 1 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:16:53 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:17:38 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:17:38 ]核函数数:1
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 2 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 12 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 2 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 7 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 2 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 2 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         System.out.printf("0\n"); ->         printf("0\n");
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             System.out.printf("1"); ->             printf("1");
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:17:38 ](Java2Cuda)耗时: 1 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:18:11 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:18:11 ]核函数数:1
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 6 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 42 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 2 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 3 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 9 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 2 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 3 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 2 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 2 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 31 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 4 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 46 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 2 ms         { ->         {
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 6 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 5 ms             { ->             {
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 2 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 3 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 5 ms         System.out.printf("0"); ->         printf("0");
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 6 ms         { ->         {
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 2 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms         System.out.printf("1"); ->         printf("1");
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         System.out.printf("2\n"); ->         printf("2\n");
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms             System.out.printf("1"); ->             printf("1");
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 2 ms  -> 
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 1 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:18:11 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:18:57 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:18:57 ]核函数数:1
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 3 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 19 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 2 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 2 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         System.out.printf("10"); ->         printf("10");
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 13 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 2 ms         } ->         }
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         System.out.printf("0"); ->         printf("0");
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 2 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         System.out.printf("1"); ->         printf("1");
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         System.out.printf("2\n"); ->         printf("2\n");
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             System.out.printf("1"); ->             printf("1");
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 4 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:18:57 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:19:17 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:19:17 ]核函数数:1
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 2 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 16 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 2 ms double[] __device__y2;//length:N -> double y2[N] =  {};//length:N
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms double[] __device__xy;//length:N -> double xy[N] =  {};//length:N
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms double[] __device__x2;//length:N -> double x2[N] =  {};//length:N
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 2 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 25 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         System.out.printf("10"); ->         printf("10");
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 8 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         System.out.printf("20"); ->         printf("20");
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         System.out.printf("0"); ->         printf("0");
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 2 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         System.out.printf("1"); ->         printf("1");
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 2 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         System.out.printf("2\n"); ->         printf("2\n");
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             System.out.printf("1"); ->             printf("1");
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx; ->             hx[cx] = 1.000 * cx;
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx; ->             hy[cx] = 2.000 * cx;
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 1 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:19:17 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:20:13 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:20:13 ]核函数数:1
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 2 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 14 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 2 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 7 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         System.out.printf("20"); ->         printf("20");
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 2 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 2 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms         System.out.printf("0"); ->         printf("0");
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 2 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         System.out.printf("1"); ->         printf("1");
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         System.out.printf("2\n"); ->         printf("2\n");
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             System.out.printf("1"); ->             printf("1");
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx + 1; ->             hx[cx] = 1.000 * cx + 1;
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 2 ms             hy[cx] = 2.000 * cx + 2; ->             hy[cx] = 2.000 * cx + 2;
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         __global__cor(N);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(N);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:20:13 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:20:40 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:20:40 ]核函数数:1
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 2 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 14 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 10 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         System.out.printf("20"); ->         printf("20");
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms         System.out.printf("0"); ->         printf("0");
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         System.out.printf("1"); ->         printf("1");
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms         System.out.printf("2\n"); ->         printf("2\n");
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             System.out.printf("1"); ->             printf("1");
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx + 1; ->             hx[cx] = 1.000 * cx + 1;
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx + 2; ->             hy[cx] = 2.000 * cx + 2;
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 2 ms         __global__cor(1000);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(1000);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:20:40 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:21:26 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:21:26 ]核函数数:1
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 11 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 9 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             System.out.printf("20"); ->             printf("20");
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             System.out.printf("20"); ->             printf("20");
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         System.out.printf("20"); ->         printf("20");
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         System.out.printf("0"); ->         printf("0");
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 2 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         System.out.printf("1"); ->         printf("1");
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         System.out.printf("2\n"); ->         printf("2\n");
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             System.out.printf("1"); ->             printf("1");
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx + 1; ->             hx[cx] = 1.000 * cx + 1;
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms             hy[cx] = 2.000 * cx + 2; ->             hy[cx] = 2.000 * cx + 2;
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         __global__cor(1000);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(1000);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:21:26 ](Java2Cuda)耗时: 1 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:21:46 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:21:46 ]核函数数:1
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 16 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         final int n = tid; ->         const int n = tid;
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             System.out.printf("20"); ->             printf("20");
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 8 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             System.out.printf("30"); ->             printf("30");
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 2 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms         System.out.printf("20"); ->         printf("20");
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         System.out.printf("0"); ->         printf("0");
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 2 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms         System.out.printf("1"); ->         printf("1");
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         System.out.printf("2\n"); ->         printf("2\n");
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             System.out.printf("1"); ->             printf("1");
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx + 1; ->             hx[cx] = 1.000 * cx + 1;
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx + 2; ->             hy[cx] = 2.000 * cx + 2;
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         __global__cor(1000);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(1000);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 2 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:21:46 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-05-20 10:23:02 ]-------------------------新纪录--------------------------
[INFO 2023-05-20 10:23:02 ]核函数数:1
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms      final int N = 10000;//global ->      const int N = 10000;//global
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 16 ms double[] __device__temp;//length:10 -> double temp[10] =  {};//length:10
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms double[] __device__y;//length:N -> double y[N] =  {};//length:N
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 2 ms double[] __device__x;//length:N -> double x[N] =  {};//length:N
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms cor(int limit)(GLOBAL) -> cor(int limit)
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdxx; ->         const int tid = threadIdx.x;
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms         final int n = blockDimx * blockIdxx + threadIdxx; ->         const int n = blockDim.x * blockIdx.x + threadIdx.x;
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         double[] __shared__x = {};//extern -> extern __shared__ double __shared__x[];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 2 ms         double[] __shared__x2 = {};//extern -> extern __shared__ double __shared__x2[];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         double[] __shared__y = {};//extern -> extern __shared__ double __shared__y[];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms         double[] __shared__y2 = {};//extern -> extern __shared__ double __shared__y2[];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         double[] __shared__xy = {};//extern -> extern __shared__ double __shared__xy[];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms         if (n < limit) { ->         if (n < limit) {
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             System.out.printf("20"); ->             printf("20");
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 10 ms             __shared__x[tid] = ICuda.__ldg(__device__x[n]); ->             __shared__x[tid] = __ldg(&x[n]);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             __shared__y[tid] = ICuda.__ldg(__device__y[n]); ->             __shared__y[tid] = __ldg(&y[n]);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             System.out.printf("30"); ->             printf("30");
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid]; ->             __shared__x2[tid] = __shared__x[tid] * __shared__x[tid];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid]; ->             __shared__y2[tid] = __shared__y[tid] * __shared__y[tid];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid]; ->             __shared__xy[tid] = __shared__x[tid] * __shared__y[tid];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         System.out.printf("20"); ->         printf("20");
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         for (int offset = blockDimx >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms                 __shared__x[tid] += __shared__x[tid + offset]; ->                 __shared__x[tid] += __shared__x[tid + offset];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms                 __shared__x2[tid] += __shared__x2[tid + offset]; ->                 __shared__x2[tid] += __shared__x2[tid + offset];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms                 __shared__y[tid] += __shared__y[tid + offset]; ->                 __shared__y[tid] += __shared__y[tid + offset];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms                 __shared__y2[tid] += __shared__y2[tid + offset]; ->                 __shared__y2[tid] += __shared__y2[tid + offset];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms                 __shared__xy[tid] += __shared__xy[tid + offset]; ->                 __shared__xy[tid] += __shared__xy[tid + offset];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms         System.out.printf("0"); ->         printf("0");
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         double dx = __shared__x[tid]; ->         double dx = __shared__x[tid];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms         double dx2 = __shared__x2[tid]; ->         double dx2 = __shared__x2[tid];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         double dy = __shared__y[tid]; ->         double dy = __shared__y[tid];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         double dy2 = __shared__y2[tid]; ->         double dy2 = __shared__y2[tid];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         double dxy = __shared__xy[tid]; ->         double dxy = __shared__xy[tid];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms             dx += ICuda.__shfl_down_sync("0xffffffff", dx, offset); ->             dx += __shfl_down_sync(0xffffffff, dx, offset);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms             dx2 += ICuda.__shfl_down_sync("0xffffffff", dx2, offset); ->             dx2 += __shfl_down_sync(0xffffffff, dx2, offset);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             dy += ICuda.__shfl_down_sync("0xffffffff", dy, offset); ->             dy += __shfl_down_sync(0xffffffff, dy, offset);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             dy2 += ICuda.__shfl_down_sync("0xffffffff", dy2, offset); ->             dy2 += __shfl_down_sync(0xffffffff, dy2, offset);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             dxy += ICuda.__shfl_down_sync("0xffffffff", dxy, offset); ->             dxy += __shfl_down_sync(0xffffffff, dxy, offset);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         System.out.printf("1"); ->         printf("1");
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[0], dx); ->             atomicAdd(&temp[0], dx);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[1], dx2); ->             atomicAdd(&temp[1], dx2);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[2], dy); ->             atomicAdd(&temp[2], dy);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[3], dy2); ->             atomicAdd(&temp[3], dy2);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__temp[4], dxy); ->             atomicAdd(&temp[4], dxy);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         System.out.printf("2\n"); ->         printf("2\n");
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         if (n == 1) { ->         if (n == 1) {
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             System.out.printf("1"); ->             printf("1");
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             dx = __device__temp[0]; ->             dx = temp[0];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             dx2 = __device__temp[1]; ->             dx2 = temp[1];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             dy = __device__temp[2]; ->             dy = temp[2];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             dy2 = __device__temp[3]; ->             dy2 = temp[3];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             dxy = __device__temp[4]; ->             dxy = temp[4];
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             double fenzi = dxy - ((dx * dy) / limit); ->             double fenzi = dxy - ((dx * dy) / limit);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             double fenmu = ICuda.sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit))); ->             double fenmu = sqrt((dx2 - (dx / limit)) * (dy2 - (dy / limit)));
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             __device__temp[5] = fenzi / fenmu; ->             temp[5] = fenzi / fenmu;
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             System.out.printf("r: %f",fenzi / fenmu); ->             printf("r: %f",fenzi / fenmu);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms         double[] hx = new double[N]; ->         double hx[N] = {};
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms         double[] hy = new double[N]; ->         double hy[N] = {};
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         for(int cx = 0; cx < N ; ++cx) { ->         for(int cx = 0; cx < N ; ++cx) {
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             hx[cx] = 1.000 * cx + 1; ->             hx[cx] = 1.000 * cx + 1;
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms             hy[cx] = 2.000 * cx + 2; ->             hy[cx] = 2.000 * cx + 2;
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("x","hx",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(x,hx,sizeof(double)*N);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyToSymbol("y","hy",ICuda.sizeof("double")*N); ->         cudaMemcpyToSymbol(y,hy,sizeof(double)*N);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms         __global__cor(1000);//tags:<<<block_size,grid_size,128>>> ->         cor<<<block_size,grid_size,128>>>(1000);//tags:<<<block_size,grid_size,128>>>
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 1 ms         double[] re = new double[10]; ->         double re[10] = {};
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("re","temp",ICuda.sizeof("double")*10); ->         cudaMemcpyFromSymbol(re,temp,sizeof(double)*10);
[INFO 2023-05-20 10:23:02 ](Java2Cuda)耗时: 0 ms         System.out.printf("c=%f\n",re[5]); ->         printf("c=%f\n",re[5]);
[INFO 2023-06-17 09:19:28 ]-------------------------新纪录--------------------------
[INFO 2023-06-17 09:19:28 ]核函数数:1
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms sum(double d_x[], double d_y[])(GLOBAL) -> sum(double d_x[], double d_y[])
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 13 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 2 ms  -> 
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         final int stride = blockDim.x * gridDim.x; ->         const int stride = blockDim.x * gridDim.x;
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         for (int n = bid * blockDim.x + tid; n < N; n += stride) ->         for (int n = bid * blockDim.x + tid; n < N; n += stride)
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms             y += d_x[n]; ->             y += d_x[n];
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         __shared__s_y[tid] = y; ->         __shared__s_y[tid] = y;
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 2 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 2 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(d_y, y); ->             atomicAdd(&d_y, y);
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms         double[] $a = (double[]) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double*) malloc(sizeof(double)*N);
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         double[] $b = (double[]) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double*) malloc(sizeof(double)*2);
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms             $a[x] = 1.0; ->             a[x] = 1.0;
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeofdouble)*N);
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms         double[] $d_y = {}; ->         double *d_y;
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("$d_y",ICuda.sizeof("double")*2); ->         cudaMalloc((void **)&d_y,sizeofdouble)*2);
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms         __global__sum($d_x,$d_y); ->         sum<<<grid_size,block_size>>>(d_x,d_y);
[INFO 2023-06-17 09:19:28 ](Java2Cuda)耗时: 1 ms  -> 
[ERROR 2023-06-17 09:19:28 ]D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306172119.cu(38): error: no instance of overloaded function "atomicAdd" matches the argument list
            argument types are: (double **, double)

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306172119.cu(48): error: identifier "sizeofdouble" is undefined

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306172119.cu(48): error: expected a ";"

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306172119.cu(50): error: expected a ";"

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306172119.cu(52): error: identifier "grid_size" is undefined

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306172119.cu(52): error: identifier "block_size" is undefined

6 errors detected in the compilation of "D:/idea_astralpathtalk/AstralPathCuda/AstralPathCuda//temp/202306172119.cu".
202306172119.cu

[INFO 2023-06-17 09:20:34 ]-------------------------新纪录--------------------------
[INFO 2023-06-17 09:20:34 ]核函数数:1
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 3 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms sum(double d_x[], double d_y[])(GLOBAL) -> sum(double d_x[], double d_y[])
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 2 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 13 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms         final int stride = blockDim.x * gridDim.x; ->         const int stride = blockDim.x * gridDim.x;
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms         for (int n = bid * blockDim.x + tid; n < N; n += stride) ->         for (int n = bid * blockDim.x + tid; n < N; n += stride)
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms             y += d_x[n]; ->             y += d_x[n];
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         __shared__s_y[tid] = y; ->         __shared__s_y[tid] = y;
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 4 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 2 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 2 ms         { ->         {
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 4 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(d_y, y); ->             atomicAdd(&d_y, y);
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms         double[] $a = (double[]) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double*) malloc(sizeof(double)*N);
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 2 ms         double[] $b = (double[]) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double*) malloc(sizeof(double)*2);
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms             $a[x] = 1.0; ->             a[x] = 1.0;
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeofdouble)*N);
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         double[] $d_y = {}; ->         double *d_y;
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMalloc("$d_y",ICuda.sizeof("double")*2); ->         cudaMalloc((void **)&d_y,sizeofdouble)*2);
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 2 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 0 ms         __global__sum($d_x,$d_y); ->         sum<<<grid_size,block_size>>>(d_x,d_y);
[INFO 2023-06-17 09:20:34 ](Java2Cuda)耗时: 1 ms  -> 
[ERROR 2023-06-17 09:20:34 ]D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306172120.cu(38): error: no instance of overloaded function "atomicAdd" matches the argument list
            argument types are: (double **, double)

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306172120.cu(48): error: identifier "sizeofdouble" is undefined

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306172120.cu(48): error: expected a ";"

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306172120.cu(50): error: expected a ";"

4 errors detected in the compilation of "D:/idea_astralpathtalk/AstralPathCuda/AstralPathCuda//temp/202306172120.cu".
202306172120.cu

[INFO 2023-06-17 09:23:11 ]-------------------------新纪录--------------------------
[INFO 2023-06-17 09:23:11 ]核函数数:1
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms sum(double d_x[], double d_y[])(GLOBAL) -> sum(double d_x[], double d_y[])
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 16 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         final int stride = blockDim.x * gridDim.x; ->         const int stride = blockDim.x * gridDim.x;
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         for (int n = bid * blockDim.x + tid; n < N; n += stride) ->         for (int n = bid * blockDim.x + tid; n < N; n += stride)
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms             y += d_x[n]; ->             y += d_x[n];
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms         __shared__s_y[tid] = y; ->         __shared__s_y[tid] = y;
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 2 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 4 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(d_y, y); ->             atomicAdd(&d_y, y);
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 2 ms         double[] $a = (double[]) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double*) malloc(sizeof(double)*N);
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         double[] $b = (double[]) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double*) malloc(sizeof(double)*2);
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms             $a[x] = 1.0; ->             a[x] = 1.0;
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         double[] $d_y = {}; ->         double *d_y;
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMalloc("$d_y",ICuda.sizeof("double")*2); ->         cudaMalloc((void **)&d_y,sizeof(double)*2);
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 3 ms         __global__sum($d_x,$d_y); ->         sum<<<grid_size,block_size>>>(d_x,d_y);
[INFO 2023-06-17 09:23:11 ](Java2Cuda)耗时: 1 ms  -> 
[ERROR 2023-06-17 09:23:11 ]D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306172123.cu(38): error: no instance of overloaded function "atomicAdd" matches the argument list
            argument types are: (double **, double)

1 error detected in the compilation of "D:/idea_astralpathtalk/AstralPathCuda/AstralPathCuda//temp/202306172123.cu".
202306172123.cu

[INFO 2023-06-17 09:24:55 ]-------------------------新纪录--------------------------
[INFO 2023-06-17 09:24:55 ]核函数数:1
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 14 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms sum(double d_x[])(GLOBAL) -> sum(double d_x[])
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 11 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         final int stride = blockDim.x * gridDim.x; ->         const int stride = blockDim.x * gridDim.x;
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms         for (int n = bid * blockDim.x + tid; n < N; n += stride) ->         for (int n = bid * blockDim.x + tid; n < N; n += stride)
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms             y += d_x[n]; ->             y += d_x[n];
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         __shared__s_y[tid] = y; ->         __shared__s_y[tid] = y;
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 2 ms             { ->             {
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 3 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__d_y, y); ->             atomicAdd(&d_y, y);
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 2 ms         double[] $a = (double[]) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double*) malloc(sizeof(double)*N);
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms             $a[x] = 1.0; ->             a[x] = 1.0;
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 1 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-17 09:24:55 ](Java2Cuda)耗时: 0 ms  -> 
[ERROR 2023-06-17 09:24:55 ]D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306172124.cu(39): error: no instance of overloaded function "atomicAdd" matches the argument list
            argument types are: (double (*)[2], double)

1 error detected in the compilation of "D:/idea_astralpathtalk/AstralPathCuda/AstralPathCuda//temp/202306172124.cu".
202306172124.cu

[INFO 2023-06-17 09:25:16 ]-------------------------新纪录--------------------------
[INFO 2023-06-17 09:25:16 ]核函数数:1
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 16 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms sum(double d_x[])(GLOBAL) -> sum(double d_x[])
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 7 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms         final int stride = blockDim.x * gridDim.x; ->         const int stride = blockDim.x * gridDim.x;
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         for (int n = bid * blockDim.x + tid; n < N; n += stride) ->         for (int n = bid * blockDim.x + tid; n < N; n += stride)
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms             y += d_x[n]; ->             y += d_x[n];
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         __shared__s_y[tid] = y; ->         __shared__s_y[tid] = y;
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 2 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 2 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 2 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 2 ms         double[] $a = (double[]) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double*) malloc(sizeof(double)*N);
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms             $a[x] = 1.0; ->             a[x] = 1.0;
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 2 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 1 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-17 09:25:16 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:27:56 ]-------------------------新纪录--------------------------
[INFO 2023-06-17 09:27:56 ]核函数数:1
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 3 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 34 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms sum(double d_x[])(GLOBAL) -> sum(double d_x[])
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 2 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 14 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms         final int stride = blockDim.x * gridDim.x; ->         const int stride = blockDim.x * gridDim.x;
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms         for (int n = bid * blockDim.x + tid; n < N; n += stride) ->         for (int n = bid * blockDim.x + tid; n < N; n += stride)
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 2 ms             y += d_x[n]; ->             y += d_x[n];
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 3 ms         } ->         }
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms         __shared__s_y[tid] = y; ->         __shared__s_y[tid] = y;
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 2 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 2 ms             { ->             {
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 2 ms  -> 
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 2 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 2 ms         } ->         }
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms         double[] $a = (double[]) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double*) malloc(sizeof(double)*N);
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms         double[] $b = (double[]) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double*) malloc(sizeof(double)*2);
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms             $a[x] = 1.0; ->             a[x] = 1.0;
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 2 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 2 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 1 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-17 09:27:56 ](Java2Cuda)耗时: 2 ms         System.out.printf("%d",$b[0]); ->         printf("%d",b[0]);
[INFO 2023-06-17 09:29:47 ]-------------------------新纪录--------------------------
[INFO 2023-06-17 09:29:47 ]核函数数:1
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 16 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 1 ms sum(double d_x[])(GLOBAL) -> sum(double d_x[])
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 7 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 1 ms         final int n = bid * blockDim.x + tid; ->         const int n = bid * blockDim.x + tid;
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 2 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0; ->         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0;
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 1 ms         __shared__s_y[tid] = y; ->         __shared__s_y[tid] = y;
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 1 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 2 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 1 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 1 ms     } ->     }
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 1 ms         double[] $a = (double[]) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double*) malloc(sizeof(double)*N);
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 1 ms         double[] $b = (double[]) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double*) malloc(sizeof(double)*2);
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms             $a[x] = 11.0; ->             a[x] = 11.0;
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 1 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-17 09:29:47 ](Java2Cuda)耗时: 0 ms         System.out.printf("%d",$b[0]); ->         printf("%d",b[0]);
[INFO 2023-06-17 09:31:23 ]-------------------------新纪录--------------------------
[INFO 2023-06-17 09:31:23 ]核函数数:1
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 14 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms sum(double d_x[])(GLOBAL) -> sum(double d_x[])
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 5 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms         final int n = bid * blockDim.x + tid; ->         const int n = bid * blockDim.x + tid;
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0; ->         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0;
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 2 ms         __shared__s_y[tid] = y; ->         __shared__s_y[tid] = y;
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 2 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 2 ms  -> 
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms             System.out.printf("%d",y); ->             printf("%d",y);
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms         double[] $a = (double[]) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double*) malloc(sizeof(double)*N);
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms         double[] $b = (double[]) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double*) malloc(sizeof(double)*2);
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms             $a[x] = 11.0; ->             a[x] = 11.0;
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-17 09:31:23 ](Java2Cuda)耗时: 0 ms         System.out.printf("%d",$b[0]); ->         printf("%d",b[0]);
[INFO 2023-06-17 09:34:04 ]-------------------------新纪录--------------------------
[INFO 2023-06-17 09:34:04 ]核函数数:1
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 14 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms sum(double d_x[])(GLOBAL) -> sum(double d_x[])
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 6 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 2 ms         final int n = bid * blockDim.x + tid; ->         const int n = bid * blockDim.x + tid;
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0; ->         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0;
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 2 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms             System.out.printf("%d",y); ->             printf("%d",y);
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms         double[] $a = (double[]) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double*) malloc(sizeof(double)*N);
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms         double[] $b = (double[]) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double*) malloc(sizeof(double)*2);
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms             $a[x] = 11.0; ->             a[x] = 11.0;
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-17 09:34:04 ](Java2Cuda)耗时: 0 ms         System.out.printf("%d",$b[0]); ->         printf("%d",b[0]);
[INFO 2023-06-17 09:34:37 ]-------------------------新纪录--------------------------
[INFO 2023-06-17 09:34:37 ]核函数数:1
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 18 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 2 ms sum(double d_x[])(GLOBAL) -> sum(double d_x[])
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 11 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         final int n = bid * blockDim.x + tid; ->         const int n = bid * blockDim.x + tid;
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0; ->         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0;
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 2 ms         { ->         {
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 3 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms             System.out.printf("%f\n",y); ->             printf("%f\n",y);
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms         double[] $a = (double[]) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double*) malloc(sizeof(double)*N);
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms         double[] $b = (double[]) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double*) malloc(sizeof(double)*2);
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms             $a[x] = 11.0; ->             a[x] = 11.0;
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 2 ms         } ->         }
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-17 09:34:37 ](Java2Cuda)耗时: 0 ms         System.out.printf("%f",$b[0]); ->         printf("%f",b[0]);
[INFO 2023-06-21 11:14:47 ]-------------------------新纪录--------------------------
[INFO 2023-06-21 11:14:47 ]使用版本:v1.2023.0617.09
[INFO 2023-06-21 11:14:47 ]核函数数:1
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 6 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 38 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms sum(double[] d_x)(GLOBAL) -> sum(double[] d_x)
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 2 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 15 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 0 ms         final int n = bid * blockDim.x + tid; ->         const int n = bid * blockDim.x + tid;
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0; ->         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0;
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 2 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 0 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 2 ms             } ->             }
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 2 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms             System.out.printf("%f\n",y); ->             printf("%f\n",y);
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         double[] $a = ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = malloc(sizeof(double)*N);
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         double[] $b = ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = malloc(sizeof(double)*2);
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 0 ms             $a[x] = 11.0; ->             a[x] = 11.0;
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 2 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 2 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-21 11:14:47 ](Java2Cuda)耗时: 1 ms         System.out.printf("%f",$b[0]); ->         printf("%f",b[0]);
[ERROR 2023-06-21 11:14:47 ]D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306212314.cu(7): error: expected a ")"

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306212314.cu(13): error: identifier "d_x" is undefined

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306212314.cu(38): error: a value of type "void *" cannot be used to initialize an entity of type "double *"

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306212314.cu(39): error: a value of type "void *" cannot be used to initialize an entity of type "double *"

4 errors detected in the compilation of "D:/idea_astralpathtalk/AstralPathCuda/AstralPathCuda//temp/202306212314.cu".
202306212314.cu

[INFO 2023-06-21 11:18:13 ]-------------------------新纪录--------------------------
[INFO 2023-06-21 11:18:13 ]使用版本:v1.2023.0617.09
[INFO 2023-06-21 11:18:13 ]核函数数:1
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 22 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms sum(double[] d_x)(GLOBAL) -> sum(double[] d_x)
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 12 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         final int n = bid * blockDim.x + tid; ->         const int n = bid * blockDim.x + tid;
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0; ->         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0;
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 2 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 2 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms             System.out.printf("%f\n",y); ->             printf("%f\n",y);
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         double[] $a = ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = malloc(sizeof(double)*N);
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         double[] $b = ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = malloc(sizeof(double)*2);
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms             $a[x] = 11.0; ->             a[x] = 11.0;
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-21 11:18:13 ](Java2Cuda)耗时: 1 ms         System.out.printf("%f",$b[0]); ->         printf("%f",b[0]);
[ERROR 2023-06-21 11:18:13 ]D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306212318.cu(7): error: expected a ")"

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306212318.cu(13): error: identifier "d_x" is undefined

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306212318.cu(38): error: a value of type "void *" cannot be used to initialize an entity of type "double *"

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306212318.cu(39): error: a value of type "void *" cannot be used to initialize an entity of type "double *"

4 errors detected in the compilation of "D:/idea_astralpathtalk/AstralPathCuda/AstralPathCuda//temp/202306212318.cu".
202306212318.cu

[INFO 2023-06-21 11:21:35 ]-------------------------新纪录--------------------------
[INFO 2023-06-21 11:21:35 ]使用版本:v1.2023.0617.09
[INFO 2023-06-21 11:21:35 ]核函数数:1
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 3 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 36 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms sum(double[] d_x)(GLOBAL) -> sum(double[] d_x)
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 17 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         final int n = bid * blockDim.x + tid; ->         const int n = bid * blockDim.x + tid;
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0; ->         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0;
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 2 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 0 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 0 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 2 ms  -> 
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 2 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 2 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 2 ms             System.out.printf("%f\n",y); ->             printf("%f\n",y);
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms     } ->     }
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         double[] $a = (double []) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double *) malloc(sizeof(double)*N);
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         double[] $b = (double []) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double *) malloc(sizeof(double)*2);
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 0 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 0 ms             $a[x] = 11.0; ->             a[x] = 11.0;
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-21 11:21:35 ](Java2Cuda)耗时: 1 ms         System.out.printf("%f",$b[0]); ->         printf("%f",b[0]);
[ERROR 2023-06-21 11:21:35 ]D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306212321.cu(7): error: expected a ")"

D:\idea_astralpathtalk\AstralPathCuda\AstralPathCuda\temp\202306212321.cu(13): error: identifier "d_x" is undefined

2 errors detected in the compilation of "D:/idea_astralpathtalk/AstralPathCuda/AstralPathCuda//temp/202306212321.cu".
202306212321.cu

[INFO 2023-06-21 11:22:58 ]-------------------------新纪录--------------------------
[INFO 2023-06-21 11:22:58 ]使用版本:v1.2023.0617.09
[INFO 2023-06-21 11:22:58 ]核函数数:1
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 21 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 3 ms sum(double[] $d_x)(GLOBAL) -> sum(double *d_x)
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 9 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         final int n = bid * blockDim.x + tid; ->         const int n = bid * blockDim.x + tid;
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         __shared__s_y[tid] = (n < N) ? $d_x[n] : 0.0; ->         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0;
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 2 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 2 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms             System.out.printf("%f\n",y); ->             printf("%f\n",y);
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 2 ms         double[] $a = (double []) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double *) malloc(sizeof(double)*N);
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         double[] $b = (double []) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double *) malloc(sizeof(double)*2);
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms             $a[x] = 11.0; ->             a[x] = 11.0;
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-21 11:22:58 ](Java2Cuda)耗时: 0 ms         System.out.printf("%f",$b[0]); ->         printf("%f",b[0]);
[INFO 2023-06-22 08:16:11 ]-------------------------新纪录--------------------------
[INFO 2023-06-22 08:16:11 ]使用版本:v1.2023.0621.10
[INFO 2023-06-22 08:16:11 ]核函数数:1
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 4 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 17 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 2 ms sum(double[] $d_x)(GLOBAL) -> sum(double *d_x)
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 8 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms         final int n = bid * blockDim.x + tid; ->         const int n = bid * blockDim.x + tid;
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms         __shared__s_y[tid] = (n < N) ? $d_x[n] : 0.0; ->         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0;
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 3 ms         } ->         }
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms             System.out.printf("%f\n",y); ->             printf("%f\n",y);
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms         double[] $a = (double []) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double *) malloc(sizeof(double)*N);
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         double[] $b = (double []) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double *) malloc(sizeof(double)*2);
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms             $a[x] = 11.0; ->             a[x] = 11.0;
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 2 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-22 08:16:11 ](Java2Cuda)耗时: 1 ms         System.out.printf("%f",$b[0]); ->         printf("%f",b[0]);
[INFO 2023-06-22 08:17:39 ]-------------------------新纪录--------------------------
[INFO 2023-06-22 08:17:39 ]使用版本:v1.2023.0621.10
[INFO 2023-06-22 08:17:39 ]核函数数:1
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 18 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 3 ms sum(double[] $d_x)(GLOBAL) -> sum(double *d_x)
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 10 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms         final int n = bid * blockDim.x + tid; ->         const int n = bid * blockDim.x + tid;
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms         __shared__s_y[tid] = (n < N) ? $d_x[n] : 0.0; ->         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0;
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 2 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms             System.out.printf("%f\n",y); ->             printf("%f\n",y);
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms         double[] $a = (double []) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double *) malloc(sizeof(double)*N);
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms         double[] $b = (double []) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double *) malloc(sizeof(double)*2);
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms             $a[x] = 11.0; ->             a[x] = 11.0;
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-22 08:17:39 ](Java2Cuda)耗时: 1 ms         System.out.printf("%f",$b[0]); ->         printf("%f",b[0]);
[INFO 2023-06-22 08:18:39 ]-------------------------新纪录--------------------------
[INFO 2023-06-22 08:18:39 ]使用版本:v1.2023.0621.10
[INFO 2023-06-22 08:18:39 ]核函数数:1
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 3 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 17 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 2 ms sum(double[] $d_x)(GLOBAL) -> sum(double *d_x)
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 9 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         final int n = bid * blockDim.x + tid; ->         const int n = bid * blockDim.x + tid;
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         __shared__s_y[tid] = (n < N) ? $d_x[n] : 0.0; ->         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0;
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 2 ms             } ->             }
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 2 ms             System.out.printf("%f\n",y); ->             printf("%f\n",y);
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         double[] $a = (double []) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double *) malloc(sizeof(double)*N);
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         double[] $b = (double []) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double *) malloc(sizeof(double)*2);
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms             $a[x] = 11.0; ->             a[x] = 11.0;
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-22 08:18:39 ](Java2Cuda)耗时: 0 ms         System.out.printf("%f",$b[0]); ->         printf("%f",b[0]);
[INFO 2023-06-22 08:19:26 ]-------------------------新纪录--------------------------
[INFO 2023-06-22 08:19:26 ]使用版本:v1.2023.0621.10
[INFO 2023-06-22 08:19:26 ]核函数数:1
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 20 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms sum(double[] $d_x)(GLOBAL) -> sum(double *d_x)
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 2 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 10 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms         final int n = bid * blockDim.x + tid; ->         const int n = bid * blockDim.x + tid;
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms         __shared__s_y[tid] = (n < N) ? $d_x[n] : 0.0; ->         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0;
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms             { ->             {
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms             System.out.printf("%f\n",y); ->             printf("%f\n",y);
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 2 ms         } ->         }
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms         double[] $a = (double []) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double *) malloc(sizeof(double)*N);
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 2 ms         double[] $b = (double []) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double *) malloc(sizeof(double)*2);
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms             $a[x] = 11.0; ->             a[x] = 11.0;
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         double[] $d_x1 = {}; ->         double *d_x1;
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 2 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms             System.out.printf("hello world"); ->             printf("hello world");
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 08:19:26 ](Java2Cuda)耗时: 0 ms         System.out.printf("%f",$b[0]); ->         printf("%f",b[0]);
[INFO 2023-06-22 08:36:22 ]-------------------------新纪录--------------------------
[INFO 2023-06-22 08:36:22 ]使用版本:v1.2023.0621.10
[INFO 2023-06-22 08:36:22 ]核函数数:1
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 25 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 5 ms sum(double[] $d_x)(GLOBAL) -> sum(double *d_x)
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 2 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 2 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 15 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms         final int n = bid * blockDim.x + tid; ->         const int n = bid * blockDim.x + tid;
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms         __shared__s_y[tid] = (n < N) ? $d_x[n] : 0.0; ->         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0;
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 2 ms         { ->         {
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 3 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 9 ms             { ->             {
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms             } ->             }
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 2 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 2 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 3 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms  -> 
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 8 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms             System.out.printf("%f\n",y); ->             printf("%f\n",y);
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms     } ->     }
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 2 ms         double[] $a = (double []) ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a = (double *) malloc(sizeof(double)*N);
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms         double[] $b = (double []) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double *) malloc(sizeof(double)*2);
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms             $a[x] = 11.0; ->             a[x] = 11.0;
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 2 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms         double[] $d_x1 = {}; ->         double *d_x1;
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 2 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 2 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 2 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms             System.out.printf("hello world"); ->             printf("hello world");
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 08:36:22 ](Java2Cuda)耗时: 1 ms         System.out.printf("%f",$b[0]); ->         printf("%f",b[0]);
[INFO 2023-06-22 12:01:04 ]-------------------------新纪录--------------------------
[INFO 2023-06-22 12:01:04 ]使用版本:v1.2023.0621.10
[INFO 2023-06-22 12:01:04 ]核函数数:1
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 2 ms      final int N = 1000;//global ->      const int N = 1000;//global
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 25 ms double[] __device__d_y;//length:2 -> double d_y[2] =  {};//length:2
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 3 ms sum(double[] $d_x)(GLOBAL) -> sum(double *d_x)
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 2 ms         final int tid = threadIdx.x; ->         const int tid = threadIdx.x;
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 2 ms         final int bid = blockIdx.x; ->         const int bid = blockIdx.x;
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 11 ms         double[] __shared__s_y = {};//length:128 -> __shared__ double __shared__s_y[128];
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 2 ms         final int n = bid * blockDim.x + tid; ->         const int n = bid * blockDim.x + tid;
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms         double y = 0.0; ->         double y = 0.0;
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms         __shared__s_y[tid] = (n < N) ? $d_x[n] : 0.0; ->         __shared__s_y[tid] = (n < N) ? d_x[n] : 0.0;
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms         ICuda.__syncthreads(); ->         __syncthreads();
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1) ->         for (int offset = blockDim.x >> 1; offset >= 32; offset >>= 1)
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms             if (tid < offset) ->             if (tid < offset)
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms             { ->             {
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms                 __shared__s_y[tid] += __shared__s_y[tid + offset]; ->                 __shared__s_y[tid] += __shared__s_y[tid + offset];
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms             } ->             }
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms             ICuda.__syncthreads(); ->             __syncthreads();
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms         y = __shared__s_y[tid]; ->         y = __shared__s_y[tid];
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms         for (int offset = 16; offset > 0; offset >>= 1) ->         for (int offset = 16; offset > 0; offset >>= 1)
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms             y += ICuda.__shfl_down_sync("0xffffffff",y, offset); ->             y += __shfl_down_sync(0xffffffff,y, offset);
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms  -> 
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms         if (tid == 0) ->         if (tid == 0)
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms         { ->         {
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms             ICuda.atomicAdd(__device__d_y[0], y); ->             atomicAdd(&d_y[0], y);
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms             System.out.printf("%f\n",y); ->             printf("%f\n",y);
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms         } ->         }
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms     } ->     }
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 2 ms         double[] $a = ICuda.malloc(ICuda.sizeof("double")*N); ->         double *a =  (double *) malloc(sizeof(double)*N);
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 2 ms         double[] $b = (double []) ICuda.malloc(ICuda.sizeof("double")*2); ->         double *b = (double *) malloc(sizeof(double)*2);
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms         for (int x = 0 ;x < N;x ++) { ->         for (int x = 0 ;x < N;x ++) {
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms             $a[x] = 11.0; ->             a[x] = 11.0;
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms         double[] $d_x = {}; ->         double *d_x;
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms         double[] $d_x1 = {}; ->         double *d_x1;
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 2 ms         ICuda.cudaMalloc("$d_x",ICuda.sizeof("double")*N); ->         cudaMalloc((void **)&d_x,sizeof(double)*N);
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms         ICuda.cudaMemcpy("$d_x","$a",ICuda.sizeof("double")*N,cudaMemcpyHostToDevice); ->         cudaMemcpy(d_x,a,sizeof(double)*N,cudaMemcpyHostToDevice);
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms         final int block_size = 128; ->         const int block_size = 128;
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms         final int grid_size =  (N + block_size - 1) / block_size; ->         const int grid_size =  (N + block_size - 1) / block_size;
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms         __global__sum($d_x); ->         sum<<<grid_size,block_size>>>(d_x);
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms         ICuda.cudaDeviceSynchronize(); ->         cudaDeviceSynchronize();
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms         ICuda.cudaMemcpyFromSymbol("b","d_y",ICuda.sizeof("double")*2); ->         cudaMemcpyFromSymbol(b,d_y,sizeof(double)*2);
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms         { ->         {
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms             System.out.printf("hello world"); ->             printf("hello world");
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 0 ms         } ->         }
[INFO 2023-06-22 12:01:04 ](Java2Cuda)耗时: 1 ms         System.out.printf("%f",$b[0]); ->         printf("%f",b[0]);
